import * as fzy from "fzy.js"

import { renderFuzzyHighlight } from "../internal/fuzzy-highlight.js"
import { assert } from "@open-wc/testing";

test("Should properly sort a list and fill it", () => {
  // List of candidate strings
  // Often generated by something like require("glob")("**/*")
  let list = [
    "amuser",
    "app/models/user.rb",
    "papp/models/user.rb",
    "app/models/order.rb", // Omitted from final
    "app/models/custom.er",
    "app/models/customer.rb",
  ];

  const expectedHighlights = [
    "<mark>amuser</mark>",
    "<mark>a</mark>pp/<mark>m</mark>odels/<mark>user</mark>.rb",
    "p<mark>a</mark>pp/<mark>m</mark>odels/<mark>user</mark>.rb", // Test not at beginning of word
    // "app/models/order.rb", // Omitted from final
    "<mark>a</mark>pp/<mark>m</mark>odels/c<mark>us</mark>tom.<mark>er</mark>", // Test end of word
    "<mark>a</mark>pp/<mark>m</mark>odels/c<mark>us</mark>tom<mark>er</mark>.rb",
  ]

  // Usually this is input from the user
  var query = "amuser";

  // fzy.js includes `hasMatch` which can be used for filtering
  list = list.filter((s) => fzy.hasMatch(query, s));

  // Sort by fzy's scoring, descending (higher scores are better matches)
  list = list.sort((a,b) => fzy.score(query, b) - fzy.score(query, a));

  list.forEach((str, index) => {
    assert.equal(renderFuzzyHighlight(query, str, (matchedString) => `<mark>${matchedString}</mark>`), expectedHighlights[index])
  })
})

test("Should properly sort a list and fill it", () => {
  // List of candidate strings
  // Often generated by something like require("glob")("**/*")
  let list = [
    "Light Mode",
  ];

  const expectedHighlights = [
    "Light Mo<mark>d</mark>e",
  ]

  // Usually this is input from the user
  var query = "d";

  // fzy.js includes `hasMatch` which can be used for filtering
  list = list.filter((s) => fzy.hasMatch(query, s));

  // Sort by fzy's scoring, descending (higher scores are better matches)
  list = list.sort((a,b) => fzy.score(query, b) - fzy.score(query, a));

  list.forEach((str, index) => {
    assert.equal(renderFuzzyHighlight(query, str, (matchedString) => `<mark>${matchedString}</mark>`), expectedHighlights[index])
  })
})

test("Should properly highlight multiple words", () => {
  // List of candidate strings
  // Often generated by something like require("glob")("**/*")
  let str = "Light Mode"
  const query = "li mo"

  const expectedHighlight = "<mark>Li</mark>ght<mark> Mo</mark>de"

  assert.equal(renderFuzzyHighlight(query, str, (matchedString) => `<mark>${matchedString}</mark>`), expectedHighlight)
})

test("Should filter readme", () => {
  let list = [
    "Light Mode",
    "README"
  ];

  const query = "li mo"

  // fzy.js includes `hasMatch` which can be used for filtering
  list = list.filter((s) => fzy.hasMatch(query, s));

  assert.equal(list.length, 1)
  assert.equal(list[0], "Light Mode")
})
