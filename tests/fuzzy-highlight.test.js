import * as fzy from "fzy.js"

import { renderHighlight } from "../internal/fuzzy-highlight.js"
import { assert } from "@open-wc/testing";

test("Should properly sort a list and fill it", () => {
  // List of candidate strings
  // Often generated by something like require("glob")("**/*")
  let list = [
    "amuser",
	  "app/models/user.rb",
	  "papp/models/user.rb",
	  "app/models/order.rb", // Omitted from final
	  "app/models/customer.rb"
  ];

  const expectedHighlights = [
    "<mark>amuser</mark>",
    "<mark>a</mark>pp/<mark>m</mark>odels/<mark>user</mark>.rb",
    "p<mark>a</mark>pp/<mark>m</mark>odels/<mark>user</mark>.rb",
	  // "app/models/order.rb", // Omitted from final
    "<mark>a</mark>pp/<mark>m</mark>odels/c<mark>us</mark>tom<mark>er</mark>.rb",
  ]

  // Usually this is input from the user
  var query = "amuser";

  // fzy.js includes `hasMatch` which can be used for filtering
  list = list.filter((s) => fzy.hasMatch(query, s));

  // Sort by fzy's scoring, descending (higher scores are better matches)
  list = list.sort((a,b) => fzy.score(query, b) - fzy.score(query, a));

  // Select only the first 10 results
  list.slice(0, 10);

  list.forEach((str, index) => {
    assert.equal(renderHighlight(query, str, (matchedString) => `<mark>${matchedString}</mark>`), expectedHighlights[index])
  })
})

